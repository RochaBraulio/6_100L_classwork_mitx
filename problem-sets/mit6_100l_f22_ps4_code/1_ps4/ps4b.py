# Problem Set 4B
# Name: Braulio Rocha
# Collaborators: None

import random


class Message(object):
    def __init__(self, input_text):
        '''
        Initializes a Message object

        input_text (string): the message's text

        a Message object has one attribute:
            the message text
        '''
        self._msg = input_text

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''Message('{self.get_text()}')'''

    def get_text(self):
        '''
        Used to access the message text outside of the class

        Returns: (string) the message text
        '''
        return self._msg

    def shift_char(self, char, shift):
        '''
        Used to shift a character as described in the pset handout

        char (string): the single character to shift.
                    ASCII value in the range: 32<=ord(char)<=126
        shift (int): the amount to shift char by

        Returns: (string) the shifted character with ASCII value in the range [32, 126]
        '''
        ascii_char = ord(char)
        if shift%95 == 0:
            # Either there is no shift, or it's a multiple of 95, the latter 
            # means the shift will wrap around the range in any direction
            # and finish at the same character where it started
            return chr(ascii_char)
        elif shift > 0:
            # Number of characters from current position to the start of range (32)
            ascii_pos_to_start = (126 - ascii_char) + 1
            if shift%95 > ascii_pos_to_start:
                # Subtracts this amount from the desired shift
                remaining_shift = shift%95 - ascii_pos_to_start
                # Shifts ASCII by the desired amount, starting from 32
                shifted_ascii_char = 32 + remaining_shift
                return chr(shifted_ascii_char)
            elif shift%95 == ascii_pos_to_start:
                return chr(32)
            else:
                shifted_ascii_char = ascii_char + shift%95
                return chr(shifted_ascii_char)
        elif shift < 0:
            # Number of characters from current position to end of range (126)
            ascii_pos_to_end = (ascii_char - 32) + 1
            if abs(shift)%95 > ascii_pos_to_end:
                # Subtracts this amount from the desired shift
                remaining_shift = abs(shift)%95 - ascii_pos_to_end
                # Shifts ASCII by the desired amount, backwards from 126
                shifted_ascii_char = 126 - remaining_shift
                return chr(shifted_ascii_char)
            elif abs(shift)%95 == ascii_pos_to_end:
                return chr(126)
            else:
                shifted_ascii_char = ascii_char - abs(shift)%95
                return chr(shifted_ascii_char)
            
    def apply_pad(self, pad):
        '''
        Used to calculate the ciphertext produced by applying a one time pad to the message text.
        For each character in the text at index i shift that character by
            the amount specified by pad[i]

        pad (list of ints): a list of integers used to encrypt the message text
                        len(pad) == len(the message text)

        Returns: (string) The ciphertext produced using the one time pad
        '''
        
        chiper_list = [self.shift_char(self._msg[i],pad[i]) for i in range(len(self._msg))]
        chiper_txt = "".join(chiper_list)
        return chiper_txt
            
class PlaintextMessage(Message):
    def __init__(self, input_text, pad=None):
        '''
        Initializes a PlaintextMessage object.

        input_text (string): the message's text
        pad (list of ints OR None): the pad to encrypt the input_text or None if left empty
            if pad is not None then len(pad) == len(self.input_text)

        A PlaintextMessage object inherits from Message. It has three attributes:
            the message text
            the pad (list of integers, determined by pad
                or generated randomly using self.generate_pad() if pad is None)
            the ciphertext (string, input_text encrypted using the pad)
        '''
        raise NotImplementedError  # delete this line and replace with your code here

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''PlaintextMessage('{self.get_text()}', {self.get_pad()})'''

    def generate_pad(self):
        '''
        Generates a one time pad which can be used to encrypt the message text.

        The pad should be generated by making a new list and for each character
            in the message chosing a random number in the range [0, 110) and
            adding that number to the list.

        Returns: (list of integers) the new one time pad
        '''
        raise NotImplementedError  # delete this line and replace with your code here

    def get_pad(self):
        '''
        Used to safely access your one time pad outside of the class

        Returns: (list of integers) a COPY of your pad
        '''
        raise NotImplementedError  # delete this line and replace with your code here

    def get_ciphertext(self):
        '''
        Used to access the ciphertext produced by applying pad to the message text

        Returns: (string) the ciphertext
        '''
        raise NotImplementedError  # delete this line and replace with your code here

    def change_pad(self, new_pad):
        '''
        Changes the pad used to encrypt the message text and updates any other
        attributes that are determined by the pad.

        new_pad (list of ints): the new one time pad that should be associated with this message.
            len(new_pad) == len(the message text)

        Returns: nothing
        '''
        raise NotImplementedError  # delete this line and replace with your code here


class EncryptedMessage(Message):
    def __init__(self, input_text):
        '''
        Initializes an EncryptedMessage object

        input_text (string): the ciphertext of the message

        an EncryptedMessage object inherits from Message. It has one attribute:
            the message text (ciphertext)
        '''
        raise NotImplementedError  # delete this line and replace with your code here

    def __repr__(self):
        '''
        Returns a human readable representation of the object
        DO NOT CHANGE

        Returns: (string) A representation of the object
        '''
        return f'''EncryptedMessage('{self.get_text()}')'''

    def decrypt_message(self, pad):
        '''
        Decrypts the message text that was encrypted with pad as described in the writeup

        pad (list of ints): the new one time pad used to encrypt the message.
            len(pad) == len(the message text)

        Returns: (PlaintextMessage) the decrypted message (containing the pad)
        '''
        raise NotImplementedError  # delete this line and replace with your code here
